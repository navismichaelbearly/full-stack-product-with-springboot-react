<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xmlns:pro="http://www.liquibase.org/xml/ns/pro"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
        http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-latest.xsd">

    <changeSet id="1" author="nmbj">
        <sql>
            create table user (
                id BIGINT NOT NULL AUTO_INCREMENT,
                username VARCHAR(255) NOT NULL,
                password VARCHAR(255) NOT NULL,
                name VARCHAR(255) NOT NULL,
                role VARCHAR(255) NOT NULL,
                CONSTRAINT PK_id PRIMARY KEY (id)
            )
        </sql>
        <rollback>
            drop table user;
        </rollback>
    </changeSet>

    <changeSet id="2" author="nmbj">
        <sql>
            create table product (
                id BIGINT NOT NULL AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL,
                price DOUBLE,
                explanation VARCHAR(1000),
                CONSTRAINT PK_id PRIMARY KEY (id)
            )
        </sql>
        <rollback>
            drop table product;
        </rollback>
    </changeSet>
    <changeSet id="3" author="nmbj">
        <sql>
            insert into product (name, price, explanation) values ("Product 1", 19.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 2", 10.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 3", 9.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 4", 29.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 5", 39.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 6", 19.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 7", 30.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 8", 50.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 9", 11.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
            insert into product (name, price, explanation) values ("Product 10", 34.99,
            "Product is so effective and has many attributes like X, Y, Z, Also we can say about it...");
        </sql>
        <rollback>
            truncate table product;
        </rollback>
    </changeSet>
    <changeSet id="4" author="nmbj">
        <sql>
            create table transaction(
                id BIGINT NOT NULL AUTO_INCREMENT,
                product_id BIGINT NOT NULL,
                user_id BIGINT NOT NULL,
                purchase_date DATETIME NOT NULL,
                CONSTRAINT PK_id PRIMARY KEY(id),
                CONSTRAINT fk_tran_product FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
                CONSTRAINT fk_tran_user FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE
            )
        </sql>
        <rollback>
            drop table transaction;
        </rollback>
    </changeSet>
</databaseChangeLog>